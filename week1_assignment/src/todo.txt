work on NUM
work on MAIN and include
work on header
work on struct field accessing
work on conditional expressions(ternary operations)
work on array declerations 
work on for construct
work on x+=5
work on eliminating NUM++ or ++NUM (curr detects this as good syntax)
work on  adding ++ID and ++ID 
work on brackets with relational operations ++(x==x)
work on relational operation followed by unary operation x||b++
work on while(!-2), x++;
"abc"+1 is valid
but "abc"|3 is invalid
"abc" + "abc" is invalid
basically manage string literals and character literals
integer array indexing only allowed (but ours allows float too
conditional expressions)
array decleration

convert to make file:
clear;lex lexer.l;yacc -d parser.y;gcc y.tab.c lex.yy.c -ll -ly;./a.out<test.c

work on unary operators like: +,- and ! [DONE]
work on ++ and -- [DONE]

use a prev variable to store the prev character before error


EXTRAS i have done:

{identifier}\[{digit}*\] {DISP; return ARR;}
\((({identifier}([,]{identifier})*)?)\) {DISP; return FUNC;}
\((({number}([,]{number})*)?)\) {DISP; return FUNC;}

\"[^"\\]*(\\.[^"\\]*)*\" {DISP; return SLITERAL;}